https://ko.javascript.info/

alt + B = 서버 시작 

공식문서 

변수 선언 키워드 3 가지
  1. let
    - 블록 스코프를 갖는 지역 변수 선언
    - 재할당 가능
    - 재선언 불가능
    - ES6에서 추가 
  2. const (선언 시 반드시 초기값 설정 필요)
    - 블록 스코프를 갖는 지역 변수 선언
    - 재할당 불가능
    - 재선언 불가능
    - ES6에서 추가 

변수명 작성 규칙
  1. 반드시 문자, 달러, 밑줄 _ 로 시작
  2. 대소문자 구분
  3. 예약어 사용 불가 ex) for, if function

변수명 Naming case
  1. camelCase  - 변수, 객체, 함수 사용
  2. PascalCase - 클래스, 생성자 사용
  3. SNAKE_CASE - 상수에 사용 


블록 스코프
  if, for 함수 등의 중괄호 {} 내부를 가르킴
  let x = 1
  if (x==1) {
    let x = 2
    console.log(x) // 2
  }
  console.log(x)   // 1

  x는 서로 다른 영역에 존재 


-- 기본적으로 const 사용 
  필요한 경우에만 let으로 전환 (재할당 필요 등 .. )

const를 기본으로 사용해야 하는 이유
  - 코드의 의도 명확화
  - 버그 예방 

DOM The Document Object Model
  - 웹 페이지를 구조화된 객체로 제공하여 프로그램이 언어가 페이지 구조에 접근할 수 있는 방법을 제공
  - 문서 구조, 스타일, 내용 등을 변경할 수 있도록 함 


document.querySelector(selector)
  - 제공하는 선택자와 일치하는 element 한개 선택
  - 만족하는 첫번째 element가 없다면 null 반환 

document.querySelectorAll(selector)
  - 제공한 선택자와 일치하는 여러 element 선택
  - 제공한 선택자를 만족하는 NodeList 반환 


1. 클래스 속성 조작
  - classList 
    - 요소의 클래스 목록을 유사배열 형태로 반환 
    1. element.classList.add()    - 추가
    2. element.classList.remove() - 제거
    3. element.classList.toggle() - 클래스가 존재하면 제거하고 false 반환 
                                  - 클래스가 없으면 추가하고 true 반환 

    // 1. 클래스 속성 조작
    // h1 요소 선택
    const h1Tag = document.querySelector('.heading')
    // h1 요소 클래스 목록 확인 
    console.log(h1Tag.classList)
    // h1 요소에 클래스 목록에 red 클래스 추가, 삭제, 토글
    h1Tag.classList.add('red')
    console.log(h1Tag.classList)

    h1Tag.classList.remove('red')
    console.log(h1Tag.classList)

    h1Tag.classList.toggle('red')
    console.log(h1Tag.classList)

2. 일반 속성 조작 메서드 
    1. Element.getAttribute()
    2. Element.setAttribute(name, value)
    3. Element.removeAttribute()

3. DOM 요소 조작 메서드
    1. document.createElement()
    2. Node.Node.appendChild()
    3. Node.removeChild()

-------------------------------------------------------------------------------

원시 자료형 (Number, String, null, boolean, Template literals)
  - 변수에 값이 직접 저장되는 자료형
  - 변수에 할당될 때 값이 복사됨
  - 변수간에 서로 영향을 미치지 않음 

참조 자료형
  - 객체의 주소가 저장되는 자료형 
  - 객체를 생성하면 객체의 메모리 주소를 변수에 할당
  - 변수간에 서로 영향을 미침

