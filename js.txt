https://ko.javascript.info/

alt + B = 서버 시작 

공식문서 

변수 선언 키워드 3 가지
  1. let
    - 블록 스코프를 갖는 지역 변수 선언
    - 재할당 가능
    - 재선언 불가능
    - ES6에서 추가 
  2. const (선언 시 반드시 초기값 설정 필요)
    - 블록 스코프를 갖는 지역 변수 선언
    - 재할당 불가능
    - 재선언 불가능
    - ES6에서 추가 

변수명 작성 규칙
  1. 반드시 문자, 달러, 밑줄 _ 로 시작
  2. 대소문자 구분
  3. 예약어 사용 불가 ex) for, if function

변수명 Naming case
  1. camelCase  - 변수, 객체, 함수 사용
  2. PascalCase - 클래스, 생성자 사용
  3. SNAKE_CASE - 상수에 사용 


블록 스코프
  if, for 함수 등의 중괄호 {} 내부를 가르킴
  let x = 1
  if (x==1) {
    let x = 2
    console.log(x) // 2
  }
  console.log(x)   // 1

  x는 서로 다른 영역에 존재 


-- 기본적으로 const 사용 
  필요한 경우에만 let으로 전환 (재할당 필요 등 .. )

const를 기본으로 사용해야 하는 이유
  - 코드의 의도 명확화
  - 버그 예방 

DOM The Document Object Model
  - 웹 페이지를 구조화된 객체로 제공하여 프로그램이 언어가 페이지 구조에 접근할 수 있는 방법을 제공
  - 문서 구조, 스타일, 내용 등을 변경할 수 있도록 함 


document.querySelector(selector)
  - 제공하는 선택자와 일치하는 element 한개 선택
  - 만족하는 첫번째 element가 없다면 null 반환 

document.querySelectorAll(selector)
  - 제공한 선택자와 일치하는 여러 element 선택
  - 제공한 선택자를 만족하는 NodeList 반환 


1. 클래스 속성 조작
  - classList 
    - 요소의 클래스 목록을 유사배열 형태로 반환 
    1. element.classList.add()    - 추가
    2. element.classList.remove() - 제거
    3. element.classList.toggle() - 클래스가 존재하면 제거하고 false 반환 
                                  - 클래스가 없으면 추가하고 true 반환 

    // 1. 클래스 속성 조작
    // h1 요소 선택
    const h1Tag = document.querySelector('.heading')
    // h1 요소 클래스 목록 확인 
    console.log(h1Tag.classList)
    // h1 요소에 클래스 목록에 red 클래스 추가, 삭제, 토글
    h1Tag.classList.add('red')
    console.log(h1Tag.classList)

    h1Tag.classList.remove('red')
    console.log(h1Tag.classList)

    h1Tag.classList.toggle('red')
    console.log(h1Tag.classList)

2. 일반 속성 조작 메서드 
    1. Element.getAttribute()
    2. Element.setAttribute(name, value)
    3. Element.removeAttribute()

3. DOM 요소 조작 메서드
    1. document.createElement()
    2. Node.Node.appendChild()
    3. Node.removeChild()

-------------------------------------------------------------------------------

원시 자료형 (Number, String, null, boolean, Template literals)
  - 변수에 값이 직접 저장되는 자료형
  - 변수에 할당될 때 값이 복사됨
  - 변수간에 서로 영향을 미치지 않음 
    Template literals - 내장된 표현식을 허용하는 문자열 작성 방식 
                      - Backtick 사용, 여러줄 걸치기 가능 
                      - const message = `홍길동은 ${age}세 입니다.`

참조 자료형
  - 객체의 주소가 저장되는 자료형 
  - 객체를 생성하면 객체의 메모리 주소를 변수에 할당
  - 변수간에 서로 영향을 미침

증가 감소 연산자
  - ++ 피연산자를 증가 시키고 연산자의 위치에 따라 증가하기 전이나 후의 값을 반환
  - -- 피연산자를 감소 시키고 연산자의 위치에 따라 감소하기 전이나 후의 값을 반환

  => +=, -=와 같이 명시적인 표현으로 작성 하는 것을 권장
    // "전위 연산자"
    // 피연산자에 1을 더한 값을 반환
    // a에 +1을 할당한 후의 값 4를 반환
    let a = 3
    const b = ++a
    console.log(a, b) // 4 4

    // "후위 연산자"
    // 피연산자에 1을 더하기 전의 값을 반환
    // x를 먼저 반환한 후 x에 +1을 할당
    let x = 3
    const y = x++
    console.log(x, y) // 4 3

    동등연산자 - 같은 값으로 평가되는 지 비교 후 boolean 값 반환 
              - 두 피 연산자가 모두 객체일 경우 같은 객체를 바라보는지 판별
    console.log('1' == 1)     // true
    console.log([1] == 1)     // true
    console.log(0 == false)   // true
    
    일치연산자 - 값과 타입이 모두 같은 경우 true
              - 엄격한 비교가 이루어지며 암묵적 타입변환 발생 X  
    console.log(1 == '1')     // false
    console.log(0 == false)   // false


---------------------------------------------------------------------------------------

if 문
    const name = '지잉'
    // const name = 'customer'
    // const name = 'admin'

    if(name === 'admin') {
      console.log('관리자님 환영해요')
    } else if (name === 'customer') {
      console.log('고객님 환영해요')
    } else {
      console.log(`반갑습니다. ${name}님`)
    }

    // 삼항 연산자
    const age = 20
    const message = (age >= 18) ? '성인' : '미성년자'
    console.log(message)

반복문
  while (조건문) {
    // 조건문이 참이면 문장을 계속해서 수행
  }

  for([초기문]; [조거문]; [증감문]){
    // 특정한 조건이 거짓으로 판별될 때 까지 반복
  }

  // for .. in  -  객체의 열거 가능한 속성에 대해 반복
  for (variable in object) {
    statement
  }
      // for...in
    const object = {
      a: 'apple',
      b: 'banana'
    }
    for(const property in object) {
      console.log(property)           // a,b
      console.log(object[property])   // apple, banana
    }


  // for .. of  -  반복가능한 객체에 대해 반복
    for (variable of iterable) {
      statement
    }
    // for...of
    const numbers = [0, 1, 2, 3]
    for (const number of numbers) {
      console.log(number)             // 0,1,2,3
    }



  for in / for of 비교
for in      - 순서가 중요한 배열에서 사용 x (객체 전용)
for of      - 배열, 문자열 처럼 반복가능한 객체

for문에서는 객체의 값을 재할당 하기 때문에 const 사용하면 에러 발생

for in, for if 에서는 재할당이 아니라 매번 다른 속성 이름이 변수에 지정되므려
  const사용해도 에러가 발생하지 않음 

배열 - for, for of
객체 - for in 


-------------------------------------------------------------------------

선언식
function add (num1, num2) {
  return num1 + num2
}
add(1,2)

표현식
const sub = function(num1, num2) {
  return num1 - num2
}
sub(2,1)

함수 선언식 특징
  - 호이스팅 됨
  - 코드의 구조와 가독성면에서 장점

함수 표현식 특징
  - 호이스팅 x
  - 익명함수 사용 가능 

함수 표현식 사용 권장
  - 예측가능성
  - 유연성 (변수에 할당되므로 함수를 값으로 다루기 쉬움)
  - 스코프 관리 (let, const와 함께하면 엄격 스코프)

----------------------------------------------------------

this 함수 호출하는 방법에 따라 가르키는 대상이 다름
단순호출     - 전역객체
메서드 호출  - 메서드를 호출한 객체